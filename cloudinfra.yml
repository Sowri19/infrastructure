AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 Infrastructure as Code Assignment4
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "192.0.0.0/16"
  PublicSubnet1CidrBlock:
    Description: "CIDR block for Public Subnet1"
    Type: String
    Default: "192.0.0.0/24"
  PublicSubnet2CidrBlock:
    Description: "CIDR block for Public Subnet2"
    Type: String
    Default: "192.0.1.0/24"
  PublicSubnet3CidrBlock:
    Description: "CIDR block for Public Subnet3"
    Type: String
    Default: "192.0.2.0/24"
  PrivateSubnet1CidrBlock:
    Description: "CIDR block for Private Subnet1"
    Type: String
    Default: "192.0.10.0/24"
  PrivateSubnet2CidrBlock:
    Description: "CIDR block for Private Subnet2"
    Type: String
    Default: "192.0.11.0/24"
  PrivateSubnet3CidrBlock:
    Description: "CIDR block for Private Subnet3"
    Type: String
    Default: "192.0.12.0/24"
  PublicRouteCidrBlock:
    Description: "Route to open Internet Access"
    Type: String
    Default: "0.0.0.0/0"
  AMIImageId:
    Default:  ami-08c40ec9ead489470
    Type: String
    Description: Ami ID of Image
  AppRootVolumeType:
    Description: "EBS volume type"
    Type: String
    Default: "gp2"
  AppRootVolumeSize:
    Description: "EBS volume size"
    Type: Number
    Default: 50
  AppInstanceType:
    Description: "WEB SERVER EC2 instance type"
    Type: String
    Default: "t2.micro"
  SSHKeyName:
    Description: "It is the name of the existing key pair in the EC2 Instance to send the data"
    Type: String
    Default: "aws"
  AWSCLOUDACCESSKEY:
    Description: "access Key"
    Type: String
    Default: "Random Aws Cloud Access Key" 
  AWSCLOUDACCESSSECRET:
    Description: " secret access Key"
    Type: String
    Default: "Random Aws Cloud Access Secret Key"


Resources:
  ApplicationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PublicSubnet3CidrBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PrivateSubnet3CidrBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: ApplicationVPC
      InternetGatewayId:
        Ref: myInternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: ApplicationVPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: ApplicationVPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
         Ref: PublicRouteTable
       DestinationCidrBlock: !Ref PublicRouteCidrBlock
       GatewayId:
         Ref: myInternetGateway
  ApplicationSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/https/ssh to EC2 Instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3080
          ToPort: 3080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
      VpcId: !Ref ApplicationVPC
      Tags:
      - Key: Name
        Value: application
  DatabaseSecuritygroup:
    DependsOn:
     - PrivateSubnet1
     - PrivateSubnet2
     - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/https/ssh to Database
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationSecuritygroup
          FromPort: 3306
          ToPort: 3306
      VpcId: !Ref ApplicationVPC
      Tags:
      - Key: Name
        Value: application
  S3bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - "csye6225.me"
      AccessControl: Private
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: Rule for S3 bucket
          Prefix: S3 images
          Status: Enabled
          Transitions:
            - TransitionInDays: 30
              StorageClass: STANDARD_IA
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: My sql DB
      Family: mysql8.0
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for database
      SubnetIds: 
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
  SQLDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: csye6225
      MasterUsername: csye6225
      MasterUserPassword: Password
      Engine: mysql
      EngineVersion : 8.0.28
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      StorageType: gp2
      PubliclyAccessible: False
      AllocatedStorage: "20"
      VPCSecurityGroups:
        - !Ref DatabaseSecuritygroup
      DBInstanceIdentifier: "csye6225"
      MultiAZ: False

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: app-ec2-instance-profile
      Path: /
      Roles:
      - !Ref EC2Role


  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  WebappS3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:Put*'
              - 's3:Get*'
              - 's3:Delete*'
            Resource:
              -  !Sub arn:aws:s3:::${S3bucket}
              -  !Sub arn:aws:s3:::${S3bucket}/*
      Roles:
        - Ref: EC2Role

  EC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      BlockDeviceMappings:
        - DeviceName: /dev/sda1  
          Ebs:
            VolumeSize: !Ref AppRootVolumeSize
            VolumeType: !Ref AppRootVolumeType
            DeleteOnTermination: "true"
      ImageId: !Ref AMIImageId
      InstanceType: !Ref AppInstanceType
      KeyName: !Ref SSHKeyName
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeleteOnTermination: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref ApplicationSecuritygroup
          SubnetId: !Ref PublicSubnet1
      UserData: 
        Fn::Base64: 
            !Sub |
            #!/bin/bash
            echo export RDShost="${SQLDBInstance.Endpoint.Address}" >> /etc/profile
            echo export RDSuser="csye6225" >> /etc/profile
            echo export RDSpassword="Password" >> /etc/profile
            echo export S3BUCKET="${S3bucket}" >> /etc/profile
            echo export AWSCLOUD_ACCESS_KEY_ID="${AWSCLOUDACCESSKEY}" >> /etc/profile
            echo export AWSCLOUD_SECRET_ACCESS_KEY="${AWSCLOUDACCESSSECRET}" >> /etc/profile
            echo export RDSdatabase="csye6225" >> /etc/profile
            echo export REGION="us-east-1" >> /etc/profile
            sleep 40
            cd /home/ubuntu/webapp
            node src/controller/client_controller.js
            echo the script is working Sowri
      Tags:
        - Key: Name
          Value: application


          

          