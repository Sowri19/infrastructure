AWSTemplateFormatVersion: "2010-09-09"
Description: CSYE 6225 Infrastructure as Code Assignment4
Parameters:
  VpcCidrBlock:
    Description: "CIDR block for VPC"
    Type: String
    Default: "192.0.0.0/16"
  PublicSubnet1CidrBlock:
    Description: "CIDR block for Public Subnet1"
    Type: String
    Default: "192.0.0.0/24"
  PublicSubnet2CidrBlock:
    Description: "CIDR block for Public Subnet2"
    Type: String
    Default: "192.0.1.0/24"
  PublicSubnet3CidrBlock:
    Description: "CIDR block for Public Subnet3"
    Type: String
    Default: "192.0.2.0/24"
  PrivateSubnet1CidrBlock:
    Description: "CIDR block for Private Subnet1"
    Type: String
    Default: "192.0.10.0/24"
  PrivateSubnet2CidrBlock:
    Description: "CIDR block for Private Subnet2"
    Type: String
    Default: "192.0.11.0/24"
  PrivateSubnet3CidrBlock:
    Description: "CIDR block for Private Subnet3"
    Type: String
    Default: "192.0.12.0/24"
  PublicRouteCidrBlock:
    Description: "Route to open Internet Access"
    Type: String
    Default: "0.0.0.0/0"
  AppAMIImage:
    Default: ami-0660c0e4d852a6dd7
    Type: String
    Description: Ami ID of Image
  AppRootVolumeType:
    Description: "EBS volume type"
    Type: String
    Default: "gp2"
  AppRootVolumeSize:
    Description: "EBS volume size"
    Type: Number
    Default: 50
  AppInstanceType:
    Description: "WebServer EC2 instance type"
    Type: String
    Default: "t2.micro"
  SSHKeyName:
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the instance"
    Type: String
    Default: "aws"
  ACCESSKEY:
    Description: "access Key"
    Type: String
    Default: "Random Access Key"
  ACCESSSECRET:
    Description: " secret access Key"
    Type: String
    Default: "Random Secret Access Key" 
  HostedZoneName:
    Description: "Domain Name"
    Type: String
    Default: "sowri.me."
  Ipv4Cidr:
    Description: "CIDR IP"
    Type: String
    Default: "0.0.0.0/0"

Resources:
  ApplicationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      InstanceTenancy: 'default'
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PublicSubnet1CidrBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PublicSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PublicSubnet3CidrBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PrivateSubnet1CidrBlock
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PrivateSubnet2CidrBlock
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: ApplicationVPC
      CidrBlock: !Ref PrivateSubnet3CidrBlock
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  myVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: ApplicationVPC
      InternetGatewayId:
        Ref: myInternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: ApplicationVPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: ApplicationVPC
      Tags:
      - Key: Name
        Value: !Ref AWS::StackName
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId:
        Ref: PrivateRouteTable
  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId:
        Ref: PrivateRouteTable
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
         Ref: PublicRouteTable
       DestinationCidrBlock: !Ref PublicRouteCidrBlock
       GatewayId:
         Ref: myInternetGateway

  ApplicationSecuritygroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/https/ssh to EC2 Instance
      VpcId: !Ref ApplicationVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - IpProtocol: tcp
          FromPort: 3080
          ToPort: 3080
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId

  #loadbalancer securiy group
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: load balancer security group
      GroupName: load balancer
      VpcId:
        Ref: ApplicationVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp:
            Ref: Ipv4Cidr
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp:
            Ref: Ipv4Cidr
      Tags:
        - Key: Name
          Value: load balancer
  
  myEC2TargetGroupLB:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthz
      HealthCheckPort: 3080
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      Name: EC2AppTargetGroup
      Port: 3080
      Protocol: HTTP
      VpcId: !Ref ApplicationVPC
      TargetType: instance 

  myautoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: SowriScaleGroup
      AvailabilityZones:
        - !Select [0, !GetAZs '']
        - !Select [1, !GetAZs '']
        - !Select [2, !GetAZs '']
      TargetGroupARNs:
        - !Ref myEC2TargetGroupLB
      VPCZoneIdentifier:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Cooldown: "60"
      MinSize: "1"
      MaxSize: "3"
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      DesiredCapacity: "1"
      Tags:
        - Key: "Name"
          PropagateAtLaunch: true
          Value: "EC2AutoScalingGroup"


  LoadBalancer:
    DependsOn: myVPCGatewayAttachment
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: AppLoadBalancer
      Scheme: internet-facing
      Type: application
      Subnets:
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2
      - !Ref PublicSubnet3
      SecurityGroups: 
      - !GetAtt LoadBalancerSecurityGroup.GroupId

  myUpScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myautoScalingGroup
      ScalingAdjustment: 1

  myDownScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref myautoScalingGroup
      ScalingAdjustment: -1       


  myCPUUsageHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger CPU alarm if threshold > 5
      AlarmName: CPU Alarm High
      Namespace: AWS/EC2
      AlarmActions:
        - !Ref myUpScalingPolicy
      MetricName: CPUUtilization
      Statistic: Average
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "5"
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref myautoScalingGroup

  myCPUUsageLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger CPU alarm if threshold is < 3
      AlarmName: CPU Alarm Low
      Namespace: AWS/EC2
      AlarmActions:
        - !Ref myDownScalingPolicy
      MetricName: CPUUtilization
      Statistic: Average
      Period: "300"
      EvaluationPeriods: "1"
      Threshold: "3"
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref myautoScalingGroup


  myEC2LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myEC2TargetGroupLB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: arn:aws:acm:us-east-1:500270589937:certificate/72113255-218e-4748-b973-b117fb354b1f

  DNSRecord:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: !Ref HostedZoneName
        Comment: Zone apex alias targeted to LoadBalancer.
        RecordSets:
        - Name: !Ref HostedZoneName
          Type: A
          AliasTarget:
            HostedZoneId: !GetAtt 'LoadBalancer.CanonicalHostedZoneID'
            DNSName: !GetAtt 'LoadBalancer.DNSName'

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: asg_launch_config
      LaunchTemplateData:
        BlockDeviceMappings:
          - DeviceName: "/dev/sda1"
            Ebs:
              VolumeType: !Ref AppRootVolumeType
              DeleteOnTermination: "true"
              VolumeSize: !Ref AppRootVolumeSize
              Encrypted: true
              KmsKeyId: !Ref myEBSkey
        NetworkInterfaces:
          - DeviceIndex: 0
            AssociatePublicIpAddress: true
            DeleteOnTermination: true
            Groups:
              - !Ref ApplicationSecuritygroup
        IamInstanceProfile:
          Arn: !GetAtt
            - AppInstanceProfile
            - Arn
        ImageId: !Ref AppAMIImage
        InstanceType: !Ref AppInstanceType
        KeyName: !Ref SSHKeyName
        UserData:
          Fn::Base64: 
              !Sub |
              #!/bin/bash
              pwd
              cd /home/ubuntu/webapp/
              pwd 
              touch .env
              echo export host="${MySqlDbInstance.Endpoint.Address}" >> .env
              echo export user="csye6225" >> .env
              echo export password="Password" >> .env
              echo export BUCKET="${S3bucket}" >> .env
              echo export AWS_ACCESS_KEY_ID="${ACCESSKEY}" >> .env
              echo export AWS_SECRET_ACCESS_KEY="${ACCESSSECRET}" >> .env
              echo export database="csye6225" >> .env
              echo export region="us-east-1" >> .env
              sudo iptables -t nat -A PREROUTING -p tcp --dport 80 -j REDIRECT --to-ports 3080
              cat .env
              sudo /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
              -a fetch-config \
              -m ec2 \
              -c file:/home/ubuntu/webapp/statsd/cloudwatch-config.json \
              -s
              echo the script is working Sowri
              sudo apt-get update -y 
              sudo pm2 reload all --update-env
              sudo pm2 delete client_controller
              npm run start
                
  DatabaseSecuritygroup:
    DependsOn:
     - PrivateSubnet1
     - PrivateSubnet2
     - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http/https/ssh to Database
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !Ref ApplicationSecuritygroup
          FromPort: 3306
          ToPort: 3306
      VpcId: !Ref ApplicationVPC
      Tags:
      - Key: Name
        Value: application
  S3bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join
        - "."
        - - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split
                  - "/"
                  - !Ref "AWS::StackId"
          - "csye6225.me"
      AccessControl: Private
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
        - Id: Rule for S3 bucket
          Prefix: S3 images
          Status: Enabled
          Transitions:
            - TransitionInDays: 30
              StorageClass: STANDARD_IA
  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties: 
      Description: My sql DB
      Family: mysql8.0
      Tags: 
        - Key: Name
          Value: !Ref AWS::StackName
  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet Group for database
      SubnetIds: 
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
  MySqlDbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: csye6225
      MasterUsername: csye6225
      MasterUserPassword: Password
      Engine: mysql
      EngineVersion : 8.0.28
      DBInstanceClass: db.t3.micro
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      StorageType: gp2
      PubliclyAccessible: False
      AllocatedStorage: "20"
      VPCSecurityGroups:
        - !Ref DatabaseSecuritygroup
      DBInstanceIdentifier: "csye6225"
      MultiAZ: False
      StorageEncrypted: true    
      KmsKeyId: !Ref myRDSKey

  AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: app-ec2-instance-profile
      Path: /
      Roles:
      - !Ref EC2Role


  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: "EC2-CSYE6225"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  WebappS3:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: WebAppS3
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 's3:Put*'
              - 's3:Get*'
              - 's3:Delete*'
            Resource:
              -  !Sub arn:aws:s3:::${S3bucket}
              -  !Sub arn:aws:s3:::${S3bucket}/*
      Roles:
        - Ref: EC2Role

  EC2CloudWatchAgentPolicy:
      Type: AWS::IAM::Policy
      Properties:
        PolicyName: "EC2CloudWatchPolicy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - 'cloudwatch:PutMetricData'
                - 'ec2:DescribeTags'
                - 'logs:PutLogEvents'
                - 'logs:DescribeLogStreams'
                - 'logs:DescribeLogGroups'
                - 'logs:CreateLogStream'
                - 'logs:CreateLogGroup'
              Resource: "*"
            - Effect: Allow
              Action:
                - 'ssm:GetParameter'
                - 'ssm:PutParameter'
              Resource: "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
        Roles:
          - Ref: EC2Role          

  SNSservice:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: verify_email
      Subscription:
        - Endpoint: !GetAtt LambdaFunction.Arn
          Protocol: lambda
      TopicName: verify_email

  SNStopicpolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2008-10-17'
        Id: __default_policy_ID
        Statement:
        - Sid: __default_statement_ID
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Publish
          - SNS:DeleteTopic
          - SNS:ListSubscriptionsByTopic
          - SNS:GetTopicAttributes
          - SNS:Receive
          - SNS:AddPermission
          - SNS:Subscribe
          Resource:
            Ref: SNSservice
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref AWS::AccountId
        - Sid: __console_pub_0
          Effect: Allow
          Principal:
            AWS: "*"
          Action: SNS:Publish
          Resource:
            Ref: SNSservice
        - Sid: __console_sub_0
          Effect: Allow
          Principal:
            AWS: "*"
          Action:
          - SNS:Subscribe
          - SNS:Receive
          Resource:
            Ref: SNSservice
      Topics:
      - Ref: SNSservice
  
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn:
        Ref: SNSservice
  
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: emailVerify
      Role:
        Fn::Join:
        - ''
        - - 'arn:aws:iam::'
          - !Ref AWS::AccountId
          - ":role/"
          - !Ref LambdaRole
      Runtime: nodejs12.x
      Handler: index.handler
      Code:
        ZipFile: |
          console.log('In Lambda function');
          exports.handler=function(event,context,callback){
            console.log('Message from SNS');
            var message = event.Records[0].Sns.Message;
            callback(null,"Success");
          };
      Description: Function to store token in dynamodb and send email to SNS

  DynamodbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - 
            AttributeName: "Email"
            AttributeType: "S"
          - 
            AttributeName: "TokenName"
            AttributeType: "S"
        KeySchema:
          - 
            AttributeName: "Email"
            KeyType: "HASH"
          - 
            AttributeName: "TokenName"
            KeyType: "RANGE"
        ProvisionedThroughput: 
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: csye-6225
        TimeToLiveSpecification:
          AttributeName: TimeToLive
          Enabled: true
        Tags:
          - Key: key
            Value: value
            
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "LambdaFunctionRole"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess 
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  myEBSkey:
      Type: AWS::KMS::Key
      Properties:
        Description: A symmetric key for encryption of EBS
        KeyPolicy:
          Id: key-default-ebs
          Version: "2012-10-17"
          Statement:
            - Sid: Enabling Key to the resource
              Effect: Allow
              Principal:
                AWS:
                  - arn:aws:iam::500270589937:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
                  - arn:aws:iam::500270589937:root
              Action: 'kms:*'
              Resource: '*'    

  myRDSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: A symmetric key for encryption of RDS
      KeyPolicy:
        Id: key-default-rds
        Version: "2012-10-17"
        Statement:
          - Sid: Enabling Key to the resource
            Effect: Allow
            Principal:
              AWS:
                - arn:aws:iam::500270589937:root
            Action: 'kms:*'
            Resource: '*'             
        
  DynamoDBPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: DynamoPolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:List*'
              - 'dynamodb:DescribeReservedCapacity*'
              - 'dynamodb:DescribeLimits'
              - 'dynamodb:DescribeTimeToLive'
            Resource: 
              - '*'
          - Effect: Allow
            Action:
              - 'dynamodb:PutItem'
              - 'dynamodb:DescribeTable'
              - 'dynamodb:Get*'
              - 'dynamodb:Query'
              - 'dynamodb:Scan'
              - 'dynamodb:Delete*'
              - 'dynamodb:CreateTable'
              - 'dynamodb:Update*'
              - 'dynamodb:BatchWrite*'
              - 'dynamodb:DescribeStream'
              - 'dynamodb:BatchGet*'
            Resource:
              - !GetAtt DynamodbTable.Arn
      Roles:
        - !Ref EC2Role
  
